plugins {
    id 'cpp'
    id 'java'
    // id 'google-test'
    id 'com.diffplug.spotless' version '6.11.0'
    id 'edu.wpi.first.wpilib.repositories.WPILibRepositoriesPlugin' version '2025.0'
    id 'edu.wpi.first.NativeUtils' version '2025.9.0'
    id 'edu.wpi.first.GradleJni' version '1.1.0'
    id 'edu.wpi.first.GradleVsCode' version '2.1.0'
}

// WPILib Version
ext.wpilibVersion = "2025.+"

repositories {
    mavenCentral()
}

if (project.hasProperty('releaseMode')) {
    wpilibRepositories.addAllReleaseRepositories(project)
} else {
    wpilibRepositories.addAllDevelopmentRepositories(project)
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}
var javaVersion = "17"

// Apply C++ configuration
apply from: 'config.gradle'

// Set up exports properly
nativeUtils {
    exportsConfigs {
        // Main library is just default empty. This will export everything
        OvertureLib {
        }
    }
}

// Apply Java configuration
dependencies {
    implementation "edu.wpi.first.cscore:cscore-java:$wpilibVersion"
    implementation "edu.wpi.first.cameraserver:cameraserver-java:$wpilibVersion"
    implementation "edu.wpi.first.ntcore:ntcore-java:$wpilibVersion"
    implementation "edu.wpi.first.wpilibj:wpilibj-java:$wpilibVersion"
    implementation "edu.wpi.first.wpiutil:wpiutil-java:$wpilibVersion"
    implementation "edu.wpi.first.wpimath:wpimath-java:$wpilibVersion"
    implementation "edu.wpi.first.wpiunits:wpiunits-java:$wpilibVersion"
    implementation "edu.wpi.first.hal:hal-java:$wpilibVersion"
    implementation "org.ejml:ejml-simple:0.43.1"
    implementation "com.fasterxml.jackson.core:jackson-annotations:2.15.2"
    implementation "com.fasterxml.jackson.core:jackson-core:2.15.2"
    implementation "com.fasterxml.jackson.core:jackson-databind:2.15.2"
    implementation 'edu.wpi.first.thirdparty.frc2024.opencv:opencv-java:4.8.0-4'
    implementation "com.ctre.phoenix6:wpiapi-java:25.0.0-beta-3"
}

// Setup Javadocs to link back to WPILib docs
javadoc {
    options {
        links "https://docs.oracle.com/en/java/javase/$javaVersion/docs/api/", 'https://github.wpilib.org/allwpilib/docs/release/java/'
    }
}

// Set up exports properly
nativeUtils {
    exportsConfigs {
        // Main library is just default empty. This will export everything
        Vendor {
        }
    }
}

model {
    components {
        OvertureLib(NativeLibrarySpec) {
            sources {
                cpp {
                    source {
                        srcDirs 'src/main/native/cpp'
                        include '**/*.cpp'
                    }
                    exportedHeaders {
                        srcDirs 'src/main/native/include'
                    }
                }
            }

            binaries.all {
                cppCompiler.define('_USE_MATH_DEFINES')
            }

            nativeUtils.useRequiredLibrary(it, "cscore_shared")
            nativeUtils.useRequiredLibrary(it, "cameraserver_shared")
            nativeUtils.useRequiredLibrary(it, "wpilib_shared")
            nativeUtils.useRequiredLibrary(it, "apriltag_shared")
            nativeUtils.useRequiredLibrary(it, "opencv_shared")
        }

    }
    // testSuites {
    // OvertureLibTest {
    //     sources.cpp {
    //         source {
    //             srcDir 'src/test/native/cpp'
    //             include '**/*.cpp'
    //         }
    //     }

    //     binaries.all {
    //         cppCompiler.define('_USE_MATH_DEFINES')
    //     }

    //     nativeUtils.useRequiredLibrary(it, "cscore_shared")
    //     nativeUtils.useRequiredLibrary(it, "cameraserver_shared")
    //     nativeUtils.useRequiredLibrary(it, "wpilib_executable_shared")
    //     nativeUtils.useRequiredLibrary(it, "googletest_static")
    //     nativeUtils.useRequiredLibrary(it, "apriltag_shared")
    //     nativeUtils.useRequiredLibrary(it, "opencv_shared")
    // }
    // }
}

spotless {
    cpp {
        target fileTree('.') {
            include '**/*.cpp', '**/*.h'
            exclude '**/build/**', '**/build-*/**'
        }
        eclipseCdt()
        toggleOffOn()
    }
    groovyGradle {
        target fileTree('.') {
            include '**/*.gradle'
            exclude '**/build/**', '**/build-*/**'
        }
        greclipse()
        indentWithSpaces(4)
        trimTrailingWhitespace()
        endWithNewline()
    }
    format 'misc', {
        target fileTree('.') {
            include '**/*.md', '**/.gitignore'
            exclude '**/build/**', '**/build-*/**'
        }
        trimTrailingWhitespace()
        indentWithSpaces(4)
        endWithNewline()
    }
}

apply from: 'publish.gradle'

wrapper {
    gradleVersion '8.11'
}
